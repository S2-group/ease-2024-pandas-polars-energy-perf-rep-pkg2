Polars_Small_no_outliers_mem <- remove_outliers(Polars_Data_Small$memory_usage)
Pandas_Big_no_outliers_exe <- remove_outliers(Pandas_Data_Big$execution_time)
Pandas_Small_no_outliers_exe <- remove_outliers(Pandas_Data_Small$execution_time)
Polars_Big_no_outliers_exe <- remove_outliers(Polars_Data_Big$execution_time)
Polars_Small_no_outliers_exe <- remove_outliers(Polars_Data_Small$execution_time)
qqPlot(Pandas_Big_no_outliers)
qqPlot(Pandas_Small_no_outliers)
qqPlot(Polars_Big_no_outliers)
qqPlot(Polars_Small_no_outliers)
qqPlot(Pandas_Big_no_outliers_cpu)
qqPlot(Pandas_Small_no_outliers_cpu)
qqPlot(Polars_Big_no_outliers_cpu)
qqPlot(Polars_Small_no_outliers_cpu)
qqPlot(Pandas_Big_no_outliers_mem)
qqPlot(Pandas_Small_no_outliers_mem)
qqPlot(Polars_Big_no_outliers_mem)
qqPlot(Polars_Small_no_outliers_mem)
qqPlot(Pandas_Big_no_outliers_exe)
qqPlot(Pandas_Small_no_outliers_exe)
qqPlot(Polars_Big_no_outliers_exe)
qqPlot(Polars_Small_no_outliers_exe)
make_scatter_plot_cpu <- function(dataset, title){
ggplot(dataset, aes(x = energy_usage, y = cpu_usage)) +
geom_point() +
labs(
title = title,
x = "energy usage",
y = "cpu usage"
)
}
make_scatter_plot_mem <- function(dataset, title){
ggplot(dataset, aes(x = energy_usage, y = memory_usage)) +
geom_point() +
labs(
title = title,
x = "energy usage",
y = "memory usage"
)
}
make_scatter_plot_exe <- function(dataset, title){
ggplot(dataset, aes(x = energy_usage, y = execution_time)) +
geom_point() +
labs(
title = title,
x = "energy usage",
y = "execution time"
)
}
make_scatter_plot_cpu(Polars_Data_Big,  "Scatterplot: Energy Usage vs. CPU Usage (Polars Big Dataset)")
make_scatter_plot_mem(Polars_Data_Big,  "Scatterplot: Energy Usage vs. Memory Usage (Polars Big Dataset)")
make_scatter_plot_exe(Polars_Data_Big,  "Scatterplot: Energy Usage vs. Execution Time (Polars Big Dataset)")
make_scatter_plot_cpu(Polars_Data_Small,  "Scatterplot: Energy Usage vs. CPU Usage (Polars Small Dataset)")
make_scatter_plot_mem(Polars_Data_Small,  "Scatterplot: Energy Usage vs. Memory Usage (Polars Small Dataset)")
make_scatter_plot_exe(Polars_Data_Small,  "Scatterplot: Energy Usage vs. Execution Time (Polars Small Dataset)")
make_scatter_plot_cpu(Pandas_Data_Big,  "Scatterplot: Energy Usage vs. CPU Usage (Pandas Big Dataset)")
make_scatter_plot_mem(Pandas_Data_Big,  "Scatterplot: Energy Usage vs. Memory Usage (Pandas Big Dataset)")
make_scatter_plot_exe(Pandas_Data_Big,  "Scatterplot: Energy Usage vs. Execution Time (Pandas Big Dataset)")
make_scatter_plot_cpu(Pandas_Data_Small,  "Scatterplot: Energy Usage vs. CPU Usage (Pandas Small Dataset)")
make_scatter_plot_mem(Pandas_Data_Small,  "Scatterplot: Energy Usage vs. Memory Usage (Pandas Small Dataset)")
make_scatter_plot_exe(Pandas_Data_Small,  "Scatterplot: Energy Usage vs. Execution Time (Pandas Small Dataset)")
# A low p-value (typically less than 0.05) indicates that the data significantly deviates from a normal distribution, providing evidence to reject the null hypothesis. In other words, it suggests non-normality.
#It is calculated during the Shapiro-Wilk test and is used to assess the degree of normality in the data. The value of W ranges between 0 and 1, where 1 indicates perfect normality.
#The smaller the W statistic, the stronger the evidence against the null hypothesis (the assumption that the data follows a normal distribution). Smaller W values suggest departures from normality.
shapiro_Pa_B <- shapiro.test(Pandas_Big_no_outliers)
shapiro_Pa_S <- shapiro.test(Pandas_Small_no_outliers)
shapiro_Po_B <- shapiro.test(Polars_Big_no_outliers)
shapiro_Po_S <- shapiro.test(Polars_Small_no_outliers)
cat("shapiro_Pandas_Big ",  "P_Value: ", shapiro_Pa_B$p.value, "W_Value: ", shapiro_Pa_B$statistic, "\n")
cat("shapiro_Pandas_Small ",  "P_Value: ", shapiro_Pa_S$p.value,"W_Value: ", shapiro_Pa_S$statistic, "\n")
cat("shapiro_Polars_Big ",  "P_Value: ", shapiro_Po_B$p.value,"W_Value: ", shapiro_Po_B$statistic, "\n")
cat("shapiro_Polars_Small ",  "P_Value: ", shapiro_Po_S$p.value,"W_Value: ", shapiro_Po_S$statistic, "\n")
shapiro_Pa_B_cpu <- shapiro.test(Pandas_Big_no_outliers_cpu)
shapiro_Pa_S_cpu <- shapiro.test(Pandas_Small_no_outliers_cpu)
shapiro_Po_B_cpu <- shapiro.test(Polars_Big_no_outliers_cpu)
shapiro_Po_S_cpu <- shapiro.test(Polars_Small_no_outliers_cpu)
cat("shapiro_Pandas_Big_cpu ",  "P_Value: ", shapiro_Pa_B_cpu$p.value, "W_Value: ", shapiro_Pa_B_cpu$statistic, "\n")
cat("shapiro_Pandas_Small_cpu ",  "P_Value: ", shapiro_Pa_S_cpu$p.value,"W_Value: ", shapiro_Pa_S_cpu$statistic, "\n")
cat("shapiro_Polars_Big_cpu ",  "P_Value: ", shapiro_Po_B_cpu$p.value,"W_Value: ", shapiro_Po_B_cpu$statistic, "\n")
cat("shapiro_Polars_Small_cpu ",  "P_Value: ", shapiro_Po_S_cpu$p.value,"W_Value: ", shapiro_Po_S_cpu$statistic, "\n")
shapiro_Pa_B_mem <- shapiro.test(Pandas_Big_no_outliers_mem)
shapiro_Pa_S_mem <- shapiro.test(Pandas_Small_no_outliers_mem)
shapiro_Po_B_mem <- shapiro.test(Polars_Big_no_outliers_mem)
shapiro_Po_S_mem <- shapiro.test(Polars_Small_no_outliers_mem)
cat("shapiro_Pandas_Big_mem ",  "P_Value: ", shapiro_Pa_B_mem$p.value, "W_Value: ", shapiro_Pa_B_mem$statistic, "\n")
cat("shapiro_Pandas_Small_mem ",  "P_Value: ", shapiro_Pa_S_mem$p.value,"W_Value: ", shapiro_Pa_S_mem$statistic, "\n")
cat("shapiro_Polars_Big_mem ",  "P_Value: ", shapiro_Po_B_mem$p.value,"W_Value: ", shapiro_Po_B_mem$statistic, "\n")
cat("shapiro_Polars_Small_mem ",  "P_Value: ", shapiro_Po_S_mem$p.value,"W_Value: ", shapiro_Po_S_mem$statistic, "\n")
shapiro_Pa_B_exe <- shapiro.test(Pandas_Big_no_outliers_exe)
shapiro_Pa_S_exe <- shapiro.test(Pandas_Small_no_outliers_exe)
shapiro_Po_B_exe <- shapiro.test(Polars_Big_no_outliers_exe)
shapiro_Po_S_exe <- shapiro.test(Polars_Small_no_outliers_exe)
cat("shapiro_Pandas_Big_exe ",  "P_Value: ", shapiro_Pa_B_exe$p.value, "W_Value: ", shapiro_Pa_B_exe$statistic, "\n")
cat("shapiro_Pandas_Small_exe ",  "P_Value: ", shapiro_Pa_S_exe$p.value,"W_Value: ", shapiro_Pa_S_exe$statistic, "\n")
cat("shapiro_Polars_Big_exe ",  "P_Value: ", shapiro_Po_B_exe$p.value,"W_Value: ", shapiro_Po_B_exe$statistic, "\n")
cat("shapiro_Polars_Small_exe ",  "P_Value: ", shapiro_Po_S_exe$p.value,"W_Value: ", shapiro_Po_S_exe$statistic, "\n")
correlation_cpu_Pandas_Big <- cor.test(Pandas_Data_Big$energy_usage, Pandas_Data_Big$cpu_usage, method = "spearman")
correlation_mem_Pandas_Big <- cor.test(Pandas_Data_Big$energy_usage, Pandas_Data_Big$memory_usage, method = "spearman")
correlation_exe_Pandas_Big <- cor.test(Pandas_Data_Big$energy_usage, Pandas_Data_Big$execution_time, method = "spearman")
correlation_cpu_Pandas_Small <- cor.test(Pandas_Data_Small$energy_usage, Pandas_Data_Small$cpu_usage, method = "spearman")
correlation_mem_Pandas_Small <- cor.test(Pandas_Data_Small$energy_usage, Pandas_Data_Small$memory_usage, method = "spearman")
correlation_exe_Pandas_Small <- cor.test(Pandas_Data_Small$energy_usage, Pandas_Data_Small$execution_time, method = "spearman")
correlation_cpu_Polars_Big <- cor.test(Polars_Data_Big$energy_usage, Polars_Data_Big$cpu_usage, method = "spearman")
correlation_mem_Polars_Big <- cor.test(Polars_Data_Big$energy_usage, Polars_Data_Big$memory_usage, method = "spearman")
correlation_exe_Polars_Big <- cor.test(Polars_Data_Big$energy_usage, Polars_Data_Big$execution_time, method = "spearman")
correlation_cpu_Polars_Small <- cor.test(Polars_Data_Small$energy_usage, Polars_Data_Small$cpu_usage, method = "spearman")
correlation_mem_Polars_Small <- cor.test(Polars_Data_Small$energy_usage, Polars_Data_Small$memory_usage, method = "spearman")
correlation_exe_Polars_Small <- cor.test(Polars_Data_Small$energy_usage, Polars_Data_Small$execution_time, method = "spearman")
# # Extract p-value from the test result
# p_value_cpu_Pandas_Big <- correlation_cpu_Pandas_Small$p.value
# p_value_mem_Pandas_Big <- correlation_mem_Pandas_Small$p.value
# p_value_exe_Pandas_Big <- correlation_exe_Pandas_Small$p.value
#
# p_value_cpu_Pandas_Small <- correlation_cpu_Pandas_Small$p.value
# p_value_mem_Pandas_Small <- correlation_mem_Pandas_Small$p.value
# p_value_exe_Pandas_Small <- correlation_exe_Pandas_Small$p.value
#
# p_value_cpu_Polars_Big <- correlation_cpu_Polars_Big$p.value
# p_value_mem_Polars_Big <- correlation_mem_Polars_Big$p.value
# p_value_exe_Polars_Big <- correlation_exe_Polars_Big$p.value
#
# p_value_cpu_Polars_Small <- correlation_cpu_Polars_Small$p.value
# p_value_mem_Polars_Small <- correlation_mem_Pandas_Small$p.value
# p_value_exe_Polars_Small <- correlation_exe_Pandas_Small$p.value
check_significance <- function(correlation, name){
# Compare p-value with the significance level (e.g., 0.05) for hypothesis testing
if (correlation$p.value <= 0.05) {
cat("\n", name, "Reject the null hypothesis: There is a significant correlation.","\n", "p_value: ", correlation$p.value, ", correlation: ", correlation$estimate)
} else {
cat("\n", name, "Fail to reject the null hypothesis: There is no significant correlation.","\n", "p_value: ", correlation$p.value, ", correlation: ", correlation$estimate)
}
}
check_significance(correlation_cpu_Pandas_Small, "cpu_Pandas_Small")
check_significance(correlation_mem_Pandas_Small, "mem_Pandas_Small")
check_significance(correlation_exe_Pandas_Small, "exe_Pandas_Small")
check_significance(correlation_cpu_Pandas_Big, "cpu_Pandas_Big")
check_significance(correlation_mem_Pandas_Big, "mem_Pandas_Big")
check_significance(correlation_exe_Pandas_Big, "exe_Pandas_Big")
check_significance(correlation_cpu_Polars_Small, "cpu_Polars_Small")
check_significance(correlation_mem_Polars_Small, "mem_Polars_Small")
check_significance(correlation_exe_Polars_Small, "exe_Polars_Small")
check_significance(correlation_cpu_Polars_Big, "cpu_Polars_Big")
check_significance(correlation_mem_Polars_Big, "mem_Polars_Big")
check_significance(correlation_exe_Polars_Big, "exe_Polars_Big")
correlation_cpu_Pandas_Big <- cor.test(Pandas_Data_Big$energy_usage, Pandas_Data_Big$cpu_usage, method = "spearman")
correlation_mem_Pandas_Big <- cor.test(Pandas_Data_Big$energy_usage, Pandas_Data_Big$memory_usage, method = "spearman")
correlation_exe_Pandas_Big <- cor.test(Pandas_Data_Big$energy_usage, Pandas_Data_Big$execution_time, method = "spearman")
correlation_cpu_Pandas_Small <- cor.test(Pandas_Data_Small$energy_usage, Pandas_Data_Small$cpu_usage, method = "spearman")
correlation_mem_Pandas_Small <- cor.test(Pandas_Data_Small$energy_usage, Pandas_Data_Small$memory_usage, method = "spearman")
correlation_exe_Pandas_Small <- cor.test(Pandas_Data_Small$energy_usage, Pandas_Data_Small$execution_time, method = "spearman")
correlation_cpu_Polars_Big <- cor.test(Polars_Data_Big$energy_usage, Polars_Data_Big$cpu_usage, method = "spearman")
correlation_mem_Polars_Big <- cor.test(Polars_Data_Big$energy_usage, Polars_Data_Big$memory_usage, method = "spearman")
correlation_exe_Polars_Big <- cor.test(Polars_Data_Big$energy_usage, Polars_Data_Big$execution_time, method = "spearman")
correlation_cpu_Polars_Small <- cor.test(Polars_Data_Small$energy_usage, Polars_Data_Small$cpu_usage, method = "spearman")
correlation_mem_Polars_Small <- cor.test(Polars_Data_Small$energy_usage, Polars_Data_Small$memory_usage, method = "spearman")
correlation_exe_Polars_Small <- cor.test(Polars_Data_Small$energy_usage, Polars_Data_Small$execution_time, method = "spearman")
# # Extract p-value from the test result
# p_value_cpu_Pandas_Big <- correlation_cpu_Pandas_Small$p.value
# p_value_mem_Pandas_Big <- correlation_mem_Pandas_Small$p.value
# p_value_exe_Pandas_Big <- correlation_exe_Pandas_Small$p.value
#
# p_value_cpu_Pandas_Small <- correlation_cpu_Pandas_Small$p.value
# p_value_mem_Pandas_Small <- correlation_mem_Pandas_Small$p.value
# p_value_exe_Pandas_Small <- correlation_exe_Pandas_Small$p.value
#
# p_value_cpu_Polars_Big <- correlation_cpu_Polars_Big$p.value
# p_value_mem_Polars_Big <- correlation_mem_Polars_Big$p.value
# p_value_exe_Polars_Big <- correlation_exe_Polars_Big$p.value
#
# p_value_cpu_Polars_Small <- correlation_cpu_Polars_Small$p.value
# p_value_mem_Polars_Small <- correlation_mem_Pandas_Small$p.value
# p_value_exe_Polars_Small <- correlation_exe_Pandas_Small$p.value
check_significance <- function(correlation, name){
# Compare p-value with the significance level (e.g., 0.05) for hypothesis testing
if (correlation$p.value <= 0.05) {
cat("\n", name, "Reject the null hypothesis: There is a significant correlation.","\n", "p_value: ", correlation$p.value, ", correlation: ", correlation$estimate)
} else {
cat("\n", name, "Fail to reject the null hypothesis: There is no significant correlation.","\n", "p_value: ", correlation$p.value, ", correlation: ", correlation$estimate)
}
}
check_significance(correlation_cpu_Pandas_Small, "cpu_Pandas_Small")
check_significance(correlation_mem_Pandas_Small, "mem_Pandas_Small")
check_significance(correlation_exe_Pandas_Small, "exe_Pandas_Small")
check_significance(correlation_cpu_Pandas_Big, "cpu_Pandas_Big")
check_significance(correlation_mem_Pandas_Big, "mem_Pandas_Big")
check_significance(correlation_exe_Pandas_Big, "exe_Pandas_Big")
check_significance(correlation_cpu_Polars_Small, "cpu_Polars_Small")
check_significance(correlation_mem_Polars_Small, "mem_Polars_Small")
check_significance(correlation_exe_Polars_Small, "exe_Polars_Small")
check_significance(correlation_cpu_Polars_Big, "cpu_Polars_Big")
check_significance(correlation_mem_Polars_Big, "mem_Polars_Big")
check_significance(correlation_exe_Polars_Big, "exe_Polars_Big")
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("tidyverse")) install.packages("tidyverse")
if (!require("dplyr")) install.packages("dplyr")
if (!require("car")) install.packages("car")
if (!require("e1071")) install.packages("e1071")
# Load the ggplot2 library if not already loaded
library(ggplot2)
library(tidyverse)
library(dplyr)
library(car)
library(e1071)
# Mean and Mode
tpch <- read.csv("./Data/RUN-TABLE-FINAL-TPCH.csv")
tpch[is.na(tpch)] <- 0
print(head(tpch))
Pandas_Data_Small <- tpch %>%
filter(library == "Pandas" & dataframe_size == "Small" )
Pandas_Data_Big <- tpch %>%
filter(library == "Pandas" & dataframe_size == "Big")
Polars_Data_Small <- tpch %>%
filter(library == "Polars" & dataframe_size == "Small" )
Polars_Data_Big <- tpch %>%
filter(library == "Polars" & dataframe_size == "Big")
analyse_descriptive_stats <- function(dataset) {
summary_stats <- summary(dataset[c("energy_usage", "memory_usage", "execution_time", "cpu_usage")])
print(summary_stats)
}
analyse_descriptive_stats(Pandas_Data_Small)
analyse_descriptive_stats(Pandas_Data_Big)
analyse_descriptive_stats(Polars_Data_Small)
analyse_descriptive_stats(Polars_Data_Big)
# Data Distribution
# Create a density plot for energy_usage for dataframe_size = small
density_plot <- function(dataset, title, x, y){
ggplot(dataset, aes(x = Values, fill = Distribution)) +
geom_density(alpha = 0.5) +
labs(
title = title,
x = x,
y = y
) +
theme_minimal()
}
violin_boxplot <- function(dataset, title, x, y) {
ggplot(dataset, aes(x = Distribution, y = Values, fill = Distribution)) +
geom_violin(alpha = 0.5) +
geom_boxplot(width = 0.03, outlier.shape = NA) +
scale_fill_manual(values = c("Pandas" = "lightblue", "Polars" = "pink")) +
labs(
title = title,
x = x,
y = y
) +
theme_minimal()
}
Small_Block <- data.frame(
Distribution = c(rep("Pandas", length(Pandas_Data_Small$cpu_usage)), rep("Polars", length(Polars_Data_Small$cpu_usage))),
Values = c(Pandas_Data_Small$cpu_usage, Polars_Data_Small$cpu_usage)
)
Big_Block <- data.frame(
Distribution = c(rep("Pandas", length(Pandas_Data_Big$cpu_usage)), rep("Polars", length(Polars_Data_Big$cpu_usage))),
Values = c(Pandas_Data_Big$energy_usage, Polars_Data_Big$cpu_usage)
)
density_plot(dataset=Small_Block, title="Density Plot of CPU Usage for Dataframe Size: Small", x="CPU Usage", y="Density")
density_plot(dataset=Big_Block, title="Density Plot of CPU Usage for Dataframe Size: Big", x="CPU Usage", y="Density")
violin_boxplot(dataset=Small_Block, title="Violin Plot of CPU Usage for Dataframe Size: Small", x="CPU Usage", y="Density")
violin_boxplot(dataset=Big_Block, title="Violin Plot of CPU Usage for Dataframe Size: Big", x="CPU Usage", y="Density")
Small_Block_memory_usage <- data.frame(
Distribution = c(rep("Pandas", length(Pandas_Data_Small$memory_usage)), rep("Polars", length(Polars_Data_Small$memory_usage))),
Values = c(Pandas_Data_Small$memory_usage, Polars_Data_Small$memory_usage)
)
Big_Block_memory_usage <- data.frame(
Distribution = c(rep("Pandas", length(Pandas_Data_Big$memory_usage)), rep("Polars", length(Polars_Data_Big$memory_usage))),
Values = c(Pandas_Data_Big$memory_usage, Polars_Data_Big$memory_usage)
)
density_plot(dataset=Small_Block_memory_usage, title="Density Plot of memory Usage for Dataframe Size: Small", x="memory Usage", y="Density")
density_plot(dataset=Big_Block_memory_usage, title="Density Plot of memory Usage for Dataframe Size: Big", x="memory Usage", y="Density")
violin_boxplot(dataset=Small_Block_memory_usage, title="Violin Plot of memory Usage for Dataframe Size: Small", x="memory Usage", y="Density")
violin_boxplot(dataset=Big_Block_memory_usage, title="Violin Plot of memory Usage for Dataframe Size: Big", x="memory Usage", y="Density")
Small_Block_execution_time <- data.frame(
Distribution = c(rep("Pandas", length(Pandas_Data_Small$execution_time)), rep("Polars", length(Polars_Data_Small$execution_time))),
Values = c(Pandas_Data_Small$execution_time, Polars_Data_Small$execution_time)
)
Big_Block_execution_time <- data.frame(
Distribution = c(rep("Pandas", length(Pandas_Data_Big$execution_time)), rep("Polars", length(Polars_Data_Big$execution_time))),
Values = c(Pandas_Data_Big$execution_time, Polars_Data_Big$execution_time)
)
density_plot(dataset=Small_Block_execution_time, title="Density Plot of execution_timefor Dataframe Size: Small", x="execution_time", y="Density")
density_plot(dataset=Big_Block_execution_time, title="Density Plot of execution_time for Dataframe Size: Big", x="execution_time", y="Density")
violin_boxplot(dataset=Small_Block_execution_time, title="Violin Plot of execution_time for Dataframe Size: Small", x="execution_time", y="Density")
violin_boxplot(dataset=Big_Block_execution_time, title="Violin Plot of execution_time for Dataframe Size: Big", x="execution_time", y="Density")
#make this example reproducible
set.seed(11)
qqPlot(Pandas_Data_Big$cpu_usage)
qqPlot(Pandas_Data_Small$cpu_usage)
qqPlot(Polars_Data_Big$cpu_usage)
qqPlot(Polars_Data_Small$cpu_usage)
qqPlot(Pandas_Data_Big$memory_usage)
qqPlot(Pandas_Data_Small$memory_usage)
qqPlot(Polars_Data_Big$memory_usage)
qqPlot(Polars_Data_Small$memory_usage)
qqPlot(Pandas_Data_Big$execution_time)
qqPlot(Pandas_Data_Small$execution_time)
qqPlot(Polars_Data_Big$execution_time)
qqPlot(Polars_Data_Small$execution_time)
find_skewness <- function(data, name, factor){
# Create a boxplot
# Calculate skewness
skew <- skewness(data)
# Determine skewness type
if (skew > 0) {
skew_type <- "Positively Skewed"
} else if (skew < 0) {
skew_type <- "Negatively Skewed"
} else {
skew_type <- "Symmetric (No skew)"
}
# Print summary statistics and skewness type
cat("Summary Statistics:\n", name, factor)
summary(data)
cat("\nSkewness:", skew_type)
# Interpretation
if (skew > 0) {
cat("\n\nThe data is positively skewed, which means it has a long tail on the right side.")
} else if (skew < 0) {
cat("\n\nThe data is negatively skewed, which means it has a long tail on the left side.")
} else {
cat("\n\nThe data is symmetric, showing no skewness.")
}
}
find_skewness(Pandas_Data_Big$cpu_usage, "PandasBig", "cpu")
find_skewness(Pandas_Data_Small$cpu_usage, "PandasSmall", "cpu")
find_skewness(Pandas_Data_Big$cpu_usage, "PolarsBig", "cpu")
find_skewness(Pandas_Data_Small$cpu_usage, "PolarsSmall", "cpu")
find_skewness(Pandas_Data_Big$memory_usage, "PandasBig", "mem")
find_skewness(Pandas_Data_Small$memory_usage, "PandasSmall", "mem")
find_skewness(Pandas_Data_Big$memory_usage, "PolarsBig", "mem")
find_skewness(Pandas_Data_Small$memory_usage, "PolarsSmall", "mem")
find_skewness(Pandas_Data_Big$execution_time, "PandasBig", "exe")
find_skewness(Pandas_Data_Small$execution_time, "PandasSmall", "exe")
find_skewness(Pandas_Data_Big$execution_time, "PolarsBig", "exe")
find_skewness(Pandas_Data_Small$execution_time, "PolarsSmall", "exe")
# For looping the tests - different dataframe will be used:
remove_outliers <- function(x) {
Q1 <- quantile(x, 0.25)
Q3 <- quantile(x, 0.75)
IQR_value <- IQR(x)
lower_bound <- Q1 -  2*IQR_value
upper_bound <- Q3 +  2*IQR_value
return(x[x >= lower_bound & x <= upper_bound])
}
# Assuming 'tpch' is your dataframe
# Define a function to remove outliers based on the Z-score
# remove_and_prepare <- function(data, threshold = 3) {
#   # Calculate Z-scores
#   data
#   z_scores <- scale(data)
#
#   # Identify and remove outliers based on the Z-scores
#   data_no_outliers <- data[abs(z_scores) <= threshold]
#
#   return(data_no_outliers)
# }
# # Remove outliers from the 'tpch' dataframe
# Check the summary of the cleaned dataframe
# Identify outliers
Pandas_Big_no_outliers <- remove_outliers(Pandas_Data_Big$energy_usage)
Pandas_Small_no_outliers <- remove_outliers(Pandas_Data_Small$energy_usage)
Polars_Big_no_outliers <- remove_outliers(Polars_Data_Big$energy_usage)
Polars_Small_no_outliers <- remove_outliers(Polars_Data_Small$energy_usage)
Pandas_Big_no_outliers_cpu <- remove_outliers(Pandas_Data_Big$cpu_usage)
Pandas_Small_no_outliers_cpu <- remove_outliers(Pandas_Data_Small$cpu_usage)
Polars_Big_no_outliers_cpu <- remove_outliers(Polars_Data_Big$cpu_usage)
Polars_Small_no_outliers_cpu <- remove_outliers(Polars_Data_Small$cpu_usage)
Pandas_Big_no_outliers_mem <- remove_outliers(Pandas_Data_Big$memory_usage)
Pandas_Small_no_outliers_mem <- remove_outliers(Pandas_Data_Small$memory_usage)
Polars_Big_no_outliers_mem <- remove_outliers(Polars_Data_Big$memory_usage)
Polars_Small_no_outliers_mem <- remove_outliers(Polars_Data_Small$memory_usage)
Pandas_Big_no_outliers_exe <- remove_outliers(Pandas_Data_Big$execution_time)
Pandas_Small_no_outliers_exe <- remove_outliers(Pandas_Data_Small$execution_time)
Polars_Big_no_outliers_exe <- remove_outliers(Polars_Data_Big$execution_time)
Polars_Small_no_outliers_exe <- remove_outliers(Polars_Data_Small$execution_time)
qqPlot(Pandas_Big_no_outliers)
qqPlot(Pandas_Small_no_outliers)
qqPlot(Polars_Big_no_outliers)
qqPlot(Polars_Small_no_outliers)
qqPlot(Pandas_Big_no_outliers_cpu)
qqPlot(Pandas_Small_no_outliers_cpu)
qqPlot(Polars_Big_no_outliers_cpu)
qqPlot(Polars_Small_no_outliers_cpu)
qqPlot(Pandas_Big_no_outliers_mem)
qqPlot(Pandas_Small_no_outliers_mem)
qqPlot(Polars_Big_no_outliers_mem)
qqPlot(Polars_Small_no_outliers_mem)
qqPlot(Pandas_Big_no_outliers_exe)
qqPlot(Pandas_Small_no_outliers_exe)
qqPlot(Polars_Big_no_outliers_exe)
qqPlot(Polars_Small_no_outliers_exe)
make_scatter_plot_cpu <- function(dataset, title){
ggplot(dataset, aes(x = energy_usage, y = cpu_usage)) +
geom_point() +
labs(
title = title,
x = "energy usage",
y = "cpu usage"
)
}
make_scatter_plot_mem <- function(dataset, title){
ggplot(dataset, aes(x = energy_usage, y = memory_usage)) +
geom_point() +
labs(
title = title,
x = "energy usage",
y = "memory usage"
)
}
make_scatter_plot_exe <- function(dataset, title){
ggplot(dataset, aes(x = energy_usage, y = execution_time)) +
geom_point() +
labs(
title = title,
x = "energy usage",
y = "execution time"
)
}
make_scatter_plot_cpu(Polars_Data_Big,  "Scatterplot: Energy Usage vs. CPU Usage (Polars Big Dataset)")
make_scatter_plot_mem(Polars_Data_Big,  "Scatterplot: Energy Usage vs. Memory Usage (Polars Big Dataset)")
make_scatter_plot_exe(Polars_Data_Big,  "Scatterplot: Energy Usage vs. Execution Time (Polars Big Dataset)")
make_scatter_plot_cpu(Polars_Data_Small,  "Scatterplot: Energy Usage vs. CPU Usage (Polars Small Dataset)")
make_scatter_plot_mem(Polars_Data_Small,  "Scatterplot: Energy Usage vs. Memory Usage (Polars Small Dataset)")
make_scatter_plot_exe(Polars_Data_Small,  "Scatterplot: Energy Usage vs. Execution Time (Polars Small Dataset)")
make_scatter_plot_cpu(Pandas_Data_Big,  "Scatterplot: Energy Usage vs. CPU Usage (Pandas Big Dataset)")
make_scatter_plot_mem(Pandas_Data_Big,  "Scatterplot: Energy Usage vs. Memory Usage (Pandas Big Dataset)")
make_scatter_plot_exe(Pandas_Data_Big,  "Scatterplot: Energy Usage vs. Execution Time (Pandas Big Dataset)")
make_scatter_plot_cpu(Pandas_Data_Small,  "Scatterplot: Energy Usage vs. CPU Usage (Pandas Small Dataset)")
make_scatter_plot_mem(Pandas_Data_Small,  "Scatterplot: Energy Usage vs. Memory Usage (Pandas Small Dataset)")
make_scatter_plot_exe(Pandas_Data_Small,  "Scatterplot: Energy Usage vs. Execution Time (Pandas Small Dataset)")
# A low p-value (typically less than 0.05) indicates that the data significantly deviates from a normal distribution, providing evidence to reject the null hypothesis. In other words, it suggests non-normality.
#It is calculated during the Shapiro-Wilk test and is used to assess the degree of normality in the data. The value of W ranges between 0 and 1, where 1 indicates perfect normality.
#The smaller the W statistic, the stronger the evidence against the null hypothesis (the assumption that the data follows a normal distribution). Smaller W values suggest departures from normality.
shapiro_Pa_B <- shapiro.test(Pandas_Big_no_outliers)
shapiro_Pa_S <- shapiro.test(Pandas_Small_no_outliers)
shapiro_Po_B <- shapiro.test(Polars_Big_no_outliers)
shapiro_Po_S <- shapiro.test(Polars_Small_no_outliers)
cat("shapiro_Pandas_Big ",  "P_Value: ", shapiro_Pa_B$p.value, "W_Value: ", shapiro_Pa_B$statistic, "\n")
cat("shapiro_Pandas_Small ",  "P_Value: ", shapiro_Pa_S$p.value,"W_Value: ", shapiro_Pa_S$statistic, "\n")
cat("shapiro_Polars_Big ",  "P_Value: ", shapiro_Po_B$p.value,"W_Value: ", shapiro_Po_B$statistic, "\n")
cat("shapiro_Polars_Small ",  "P_Value: ", shapiro_Po_S$p.value,"W_Value: ", shapiro_Po_S$statistic, "\n")
shapiro_Pa_B_cpu <- shapiro.test(Pandas_Big_no_outliers_cpu)
shapiro_Pa_S_cpu <- shapiro.test(Pandas_Small_no_outliers_cpu)
shapiro_Po_B_cpu <- shapiro.test(Polars_Big_no_outliers_cpu)
shapiro_Po_S_cpu <- shapiro.test(Polars_Small_no_outliers_cpu)
cat("shapiro_Pandas_Big_cpu ",  "P_Value: ", shapiro_Pa_B_cpu$p.value, "W_Value: ", shapiro_Pa_B_cpu$statistic, "\n")
cat("shapiro_Pandas_Small_cpu ",  "P_Value: ", shapiro_Pa_S_cpu$p.value,"W_Value: ", shapiro_Pa_S_cpu$statistic, "\n")
cat("shapiro_Polars_Big_cpu ",  "P_Value: ", shapiro_Po_B_cpu$p.value,"W_Value: ", shapiro_Po_B_cpu$statistic, "\n")
cat("shapiro_Polars_Small_cpu ",  "P_Value: ", shapiro_Po_S_cpu$p.value,"W_Value: ", shapiro_Po_S_cpu$statistic, "\n")
shapiro_Pa_B_mem <- shapiro.test(Pandas_Big_no_outliers_mem)
shapiro_Pa_S_mem <- shapiro.test(Pandas_Small_no_outliers_mem)
shapiro_Po_B_mem <- shapiro.test(Polars_Big_no_outliers_mem)
shapiro_Po_S_mem <- shapiro.test(Polars_Small_no_outliers_mem)
cat("shapiro_Pandas_Big_mem ",  "P_Value: ", shapiro_Pa_B_mem$p.value, "W_Value: ", shapiro_Pa_B_mem$statistic, "\n")
cat("shapiro_Pandas_Small_mem ",  "P_Value: ", shapiro_Pa_S_mem$p.value,"W_Value: ", shapiro_Pa_S_mem$statistic, "\n")
cat("shapiro_Polars_Big_mem ",  "P_Value: ", shapiro_Po_B_mem$p.value,"W_Value: ", shapiro_Po_B_mem$statistic, "\n")
cat("shapiro_Polars_Small_mem ",  "P_Value: ", shapiro_Po_S_mem$p.value,"W_Value: ", shapiro_Po_S_mem$statistic, "\n")
shapiro_Pa_B_exe <- shapiro.test(Pandas_Big_no_outliers_exe)
shapiro_Pa_S_exe <- shapiro.test(Pandas_Small_no_outliers_exe)
shapiro_Po_B_exe <- shapiro.test(Polars_Big_no_outliers_exe)
shapiro_Po_S_exe <- shapiro.test(Polars_Small_no_outliers_exe)
cat("shapiro_Pandas_Big_exe ",  "P_Value: ", shapiro_Pa_B_exe$p.value, "W_Value: ", shapiro_Pa_B_exe$statistic, "\n")
cat("shapiro_Pandas_Small_exe ",  "P_Value: ", shapiro_Pa_S_exe$p.value,"W_Value: ", shapiro_Pa_S_exe$statistic, "\n")
cat("shapiro_Polars_Big_exe ",  "P_Value: ", shapiro_Po_B_exe$p.value,"W_Value: ", shapiro_Po_B_exe$statistic, "\n")
cat("shapiro_Polars_Small_exe ",  "P_Value: ", shapiro_Po_S_exe$p.value,"W_Value: ", shapiro_Po_S_exe$statistic, "\n")
correlation_cpu_Pandas_Big <- cor.test(Pandas_Data_Big$energy_usage, Pandas_Data_Big$cpu_usage, method = "spearman")
correlation_mem_Pandas_Big <- cor.test(Pandas_Data_Big$energy_usage, Pandas_Data_Big$memory_usage, method = "spearman")
correlation_exe_Pandas_Big <- cor.test(Pandas_Data_Big$energy_usage, Pandas_Data_Big$execution_time, method = "spearman")
correlation_cpu_Pandas_Small <- cor.test(Pandas_Data_Small$energy_usage, Pandas_Data_Small$cpu_usage, method = "spearman")
correlation_mem_Pandas_Small <- cor.test(Pandas_Data_Small$energy_usage, Pandas_Data_Small$memory_usage, method = "spearman")
correlation_exe_Pandas_Small <- cor.test(Pandas_Data_Small$energy_usage, Pandas_Data_Small$execution_time, method = "spearman")
correlation_cpu_Polars_Big <- cor.test(Polars_Data_Big$energy_usage, Polars_Data_Big$cpu_usage, method = "spearman")
correlation_mem_Polars_Big <- cor.test(Polars_Data_Big$energy_usage, Polars_Data_Big$memory_usage, method = "spearman")
correlation_exe_Polars_Big <- cor.test(Polars_Data_Big$energy_usage, Polars_Data_Big$execution_time, method = "spearman")
correlation_cpu_Polars_Small <- cor.test(Polars_Data_Small$energy_usage, Polars_Data_Small$cpu_usage, method = "spearman")
correlation_mem_Polars_Small <- cor.test(Polars_Data_Small$energy_usage, Polars_Data_Small$memory_usage, method = "spearman")
correlation_exe_Polars_Small <- cor.test(Polars_Data_Small$energy_usage, Polars_Data_Small$execution_time, method = "spearman")
# # Extract p-value from the test result
# p_value_cpu_Pandas_Big <- correlation_cpu_Pandas_Small$p.value
# p_value_mem_Pandas_Big <- correlation_mem_Pandas_Small$p.value
# p_value_exe_Pandas_Big <- correlation_exe_Pandas_Small$p.value
#
# p_value_cpu_Pandas_Small <- correlation_cpu_Pandas_Small$p.value
# p_value_mem_Pandas_Small <- correlation_mem_Pandas_Small$p.value
# p_value_exe_Pandas_Small <- correlation_exe_Pandas_Small$p.value
#
# p_value_cpu_Polars_Big <- correlation_cpu_Polars_Big$p.value
# p_value_mem_Polars_Big <- correlation_mem_Polars_Big$p.value
# p_value_exe_Polars_Big <- correlation_exe_Polars_Big$p.value
#
# p_value_cpu_Polars_Small <- correlation_cpu_Polars_Small$p.value
# p_value_mem_Polars_Small <- correlation_mem_Pandas_Small$p.value
# p_value_exe_Polars_Small <- correlation_exe_Pandas_Small$p.value
check_significance <- function(correlation, name){
# Compare p-value with the significance level (e.g., 0.05) for hypothesis testing
if (correlation$p.value <= 0.05) {
cat("\n", name, "Reject the null hypothesis: There is a significant correlation.","\n", "p_value: ", correlation$p.value, ", correlation: ", correlation$estimate)
} else {
cat("\n", name, "Fail to reject the null hypothesis: There is no significant correlation.","\n", "p_value: ", correlation$p.value, ", correlation: ", correlation$estimate)
}
}
check_significance(correlation_cpu_Pandas_Small, "cpu_Pandas_Small")
check_significance(correlation_mem_Pandas_Small, "mem_Pandas_Small")
check_significance(correlation_exe_Pandas_Small, "exe_Pandas_Small")
check_significance(correlation_cpu_Pandas_Big, "cpu_Pandas_Big")
check_significance(correlation_mem_Pandas_Big, "mem_Pandas_Big")
check_significance(correlation_exe_Pandas_Big, "exe_Pandas_Big")
check_significance(correlation_cpu_Polars_Small, "cpu_Polars_Small")
check_significance(correlation_mem_Polars_Small, "mem_Polars_Small")
check_significance(correlation_exe_Polars_Small, "exe_Polars_Small")
check_significance(correlation_cpu_Polars_Big, "cpu_Polars_Big")
check_significance(correlation_mem_Polars_Big, "mem_Polars_Big")
check_significance(correlation_exe_Polars_Big, "exe_Polars_Big")
